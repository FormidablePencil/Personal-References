This is all we've covered of the React step by step tutorial and now it's a place of returning for reference on React. Mind that the documentation is the best reference.

------------Random facts----------

-You can put any JavaScript expressions within braces inside JSX.
-To “remember” things, components use state.
-"this" should always refer to the function unless if it's in the context of an arrow function and/or there's a constructer super within it to bind the 'this' keyword.
-it’s conventional to use on[Event] names for props which represent events and handle[Event] for the methods by which handle the events.
-We should always start from the smallest component and add class components over it so to bundle things up and create a html layout.
-Whether you declare a component as a function or a class, it must never modify its own props. Such functions are called “pure” because they do not attempt to change their inputs, and always return the same result for the same inputs. The only way you change the data in prop is by using state.

------Highly important notes-------

props written like this for example this.props.something is a way by which to pass in data from the higher classes using something=
state you'll see for example this.state.something is taking data from state 
you would be using exmPassData={this.state.something} to take data from it's class and then pass it down to the component props.exmPassData (this is the exmPassData= found in the higher class).
-There are 3 things you should know about setState()
    1. Don't modify the state directly: this.state.comment = "hello"; is a no no. Correct: this.setState({comment: 'hello});
    2. Because this.props and this.state may be updated asynchronously, you should not rely on their values for calculating the next state.
        -Wrong:
          this.setState({
            counter: this.state.counter + this.props.increment,
          });
        -Correct:
          this.setState((state, props) => ({
            counter: state.counter + props.increment
          }));   //This way it puts in the arguments into the parameters first before it does the calculations.
    3. When you call setState(), React merges the object you provide into the current state. 
    4. Neither parents nor child components can know if a certain component is stateful or stateless, and they shouldn’t care whether it is defined as a function or a class. State is not accessible to any component other than the one that owns and sets it.
    5. A component may choose to pass its state down as props to its child components.

------------Definitions------------

render: Unlike return() render basically puts everything within itself including return() and other functions. functional components don't have render() because they don't render anything into the DOM.
Mounting & Unmounting: "In applications with many components, it’s very important to free up resources taken by the components when they are destroyed. We want to set up a timer whenever the Clock is rendered to the DOM for the first time. This is called “mounting” in React.
We also want to clear that timer whenever the DOM produced by the Clock is removed. This is called “unmounting” in React."

------------Questions--------------

So under what condition do we put variables and functions within render()?
How does the history feature work? 
What's the virtual DOM and how to use it?

-----------------------------------
We've created a tic-tac-toe game that:
-Lets you play tic-tac-toe,
-Indicates when a player has won the game,
-Stores a game’s history as a game progresses,
-Allows players to review a game’s history and see previous versions of a game’s board.

Throughout this tutorial, we touched on React concepts including elements,
components, props, and state.
For a more detailed explanation of each of these topics,
 check out the rest of the documentation. 

 Todo:
 -Continue on with the documentation


Keep a good mental stock about these core things that tell you what you're looking at:
  return(): is where we edit and modify elements.
  render(): renders the return() next to it into the DOM. 
  function components: Don't use 'this.' Don't use render(). Functions create and modify elements.
  vs.
  class components: Use 'this' excessively. Uses render(). Classes take html elements to create a html layout.
  constructor and super go together and they bind the 'this' to what ever class it is in.

Sections-
  First: Function; creating and modifying the element(s).
  Second: Class; 
      a. adding content (really we are just setting up props for it in this class)
      b. render out into the virtual dom. How it looks is how it will be displayed on the client side (meaning visually).
    Third: Class higher up;
      a. set 'this' and this.state to refer to itself (Game class).
      b. set up an event handler for it's corresponding onClick.
      c. render everything into the DOM.